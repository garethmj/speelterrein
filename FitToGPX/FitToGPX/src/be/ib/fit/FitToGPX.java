////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.20Release
// Tag = $Name: AKW1_200 $
////////////////////////////////////////////////////////////////////////////////
package be.ib.fit;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import com.garmin.fit.Decode;
import com.garmin.fit.Fit;
import com.garmin.fit.FitRuntimeException;
import com.garmin.fit.MesgBroadcaster;
import com.garmin.fit.MesgDefinitionListener;
import com.garmin.fit.MesgListener;
import com.garmin.fit.test.TestTool;

/**
 * 
 * @author Ivan Belis
 * @see TestTool and CSVTool
 */
public class FitToGPX {
	public static void main(String args[]) {
		int arg = 0;
		ArrayList<String> fileArgs = new ArrayList<String>();

		System.out.printf("FIT to GPX converter %d.%d.%d.%d\n", Fit.PROTOCOL_VERSION_MAJOR, Fit.PROTOCOL_VERSION_MINOR,
				Fit.PROFILE_VERSION_MAJOR, Fit.PROFILE_VERSION_MINOR);

		while (arg < args.length) {
			if (args[arg].equals("-d")) {
				Fit.debug = true;
			} else {
				fileArgs.add(args[arg]);
			}
			arg++;
		}

		if (fileArgs.size() < 1) {
			printUsage();
			System.exit(1);
		}

		// if 2 arguments and the second is a directory
		if ((fileArgs.size() == 2) && (new File(fileArgs.get(1))).isDirectory()) {
			convertFitToGpx(fileArgs.get(0), fileArgs.get(1));
		} else {
			// The argumens are a list of input files
			for (String inFilename : fileArgs) {
				// determine output file name
				String outFilename;
				if (inFilename.endsWith(".fit")) {
					outFilename = inFilename.replace(".fit", ".gpx");
				} else {
					outFilename = inFilename + ".gpx";
				}
				convertFitToGpx(inFilename, outFilename);
			}
		}
		System.out.println("Done.");
	}

	public static void convertFitToGpx(String arg1, String arg2) {
		try {

			File file1 = new File(arg1);
			if (file1.exists()) {
				if (file1.isDirectory()) {
					convertDirectory(arg1, arg2);
				} else {
					convertFile(arg1, arg2);
				}
			} else {
				printUsage();
				System.exit(1);
			}

		} catch (java.io.IOException e) {
			throw new RuntimeException(e);
		}
	}

	private static void convertFile(String fitFilename, String gpxFilename) throws IOException {
		if ((new File(gpxFilename)).exists()) {
			System.out.println("Skipping  " + fitFilename + " because outputfile already exists:" + gpxFilename);
			return;
		}
		System.out.println("Converting " + fitFilename + " to " + gpxFilename);
		MesgGPXWriter mesgWriter = null;
		FileInputStream fitFile = null;
		try {
			Decode decode = new Decode();
			MesgBroadcaster broadcaster = new MesgBroadcaster(decode);
			mesgWriter = new MesgGPXWriter(new PrintStream(gpxFilename));

			decode.addListener((MesgDefinitionListener) mesgWriter);
			decode.addListener((MesgListener) mesgWriter);

			fitFile = new FileInputStream(fitFilename);
			broadcaster.run(fitFile);
		} catch (FitRuntimeException fex) {
			mesgWriter.close();
			fitFile.close();
			fitFile = null;
			mesgWriter = null;

			handleError(fitFilename, gpxFilename, fex);
		} finally {
			if (mesgWriter != null) {
				mesgWriter.close();
			}
			if (fitFile != null) {
				fitFile.close();
			}
		}
	}

	private static void handleError(String fitFilename, String gpxFilename, Exception fex) {
		System.err.println("Error converting " + fitFilename + " " + fex.getMessage());

		// rename the file to indicate that it has an error
		String errorName = gpxFilename.replace(".gpx", "_ERROR.gpx");
		File oldFile = new File(gpxFilename);
		boolean renameOK = oldFile.renameTo(new File(errorName));

		System.err.println(renameOK ? "Moved file to " + errorName : "Error Moving file " + gpxFilename + " to "
				+ errorName);
	}

	private static void convertDirectory(String inDirName, String outDirName) throws IOException {
		System.out.println("Reading " + inDirName);
		// List all .fit files in the directory
		File inDirectory = new File(inDirName);
		String[] inFiles = inDirectory.list(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith(".fit");
			}
		});

		// and convert them all
		for (String file : inFiles) {
			String outFileName = file.replace(".fit", ".gpx");
			convertFile(inDirName + File.separatorChar + file, outDirName + File.separatorChar + outFileName);
		}

	}

	private static void printUsage() {
		System.out.println("Usage: java -jar FitToGPX.jar <INPUT FILE> [<INPUT FILE>]*");
		System.out.println("       java -jar FitToGPX.jar <INPUT DIRECTORY> <OUTPUT DIRECTORY>");
		System.out.println("      -d Enable debug output.");
	}
}